var ghost = require('./cfg/ghost.js')
var gapi = require('./cmn/gapi.js')

exports.itfconf = function() {
    return new CurrentAPI().conf()
}
exports.itfleft = function(req, res, fld, fle) {
    return new CurrentAPI().output(req, res, fld, fle)
}
var CurrentAPI = gapi.BaseAPI.extend({
    conf: function() {
        return {
            auth: false,
            type: 'json',
            itfs: [{
                host: ghost.dscm.dcbusiness.addr,
                port: ghost.dscm.dcbusiness.port,
                iurl: '/wechatAccountApp?actn=getUserMessage',
                uuid: 'wechatAccountApp',
                meth: 'post',
                type: 'sdcm',
                next: [],
                func: function(req, res, fld, fle) {
                    return new CurrentAPI('wechatAccountApp')
                        .callFunc(req, res, fld, fle)
                }
            }]
        }
    },

    doCallFunc: function(uuid, req, res, fld, fle) {
        // var userID = req.session.user.userId ? req.session.user.userId : "922713",
        //     ip = gapi.getIPv4(req.user.addr);
        console.log(req.session.user.userId)
        // var userID = 922713
        var userID = req.session.user.userId
        var ip = gapi.getIPv4(req.user.addr)
        if (gapi.emptyEqual(userID, '')) {
            res.jsonp(gapi.toResult(401, '请先登录'))
            ghost.getLogger().error("[doCallFunc]IP：%s, service: mine.userInfoDataService, dc: wechatAccountApp, message: 'param error', param: userId=%s", ip, userID)
            return null
        }
        ghost.getLogger().info("[doCallFunc]IP：%s, service: mine.userInfoDataService, dc: wechatAccountApp, message: 'param', param: userID=%s", ip, userID)
        return {
            'claz': "['java.lang.String']",
            'json': [userID]
        }
    },

    doOutput: function(req, res, fld, fle) {
        var ip = gapi.getIPv4(req.user.addr)
        if (!req.rslt['wechatAccountApp']) {
            ghost.getLogger().error("[doOutput]IP：%s, service: accountInfo, dc: wechatAccountApp.getUserMessage, message: 'rslt is null', rslt: %s", ip, JSON.stringify(req.rslt['wechatAccountApp']))
            return gapi.toResult(500, '系统异常')
        }
        if (gapi.emptyNoequal(req.rslt['wechatAccountApp'].code, 0)) {
            // 这里根据后端服务返回的code值不同提示信息不同
            if (gapi.emptyEqual(req.rslt['wechatAccountApp'].message, '')) {
                req.rslt['wechatAccountApp'].message = '操作失败'
            }
            ghost.getLogger().error("[doOutput]IP：%s, service: accountInfo, dc: wechatAccountApp.getUserMessage, message: 'rslt error', rslt: %s", ip, JSON.stringify(req.rslt['wechatAccountApp']))
            return gapi.toResult(1, req.rslt['wechatAccountApp'].message)
        }
        return gapi.toResult(null, null, req.rslt['wechatAccountApp'])
    }
})
